{"version":3,"sources":["userController.js"],"names":["bcrypt","require","db","exports","showLoginForm","req","res","render","title","login","body","email","password","User","findOne","where","user","compare","session","redirect","status","send","console","error","showRegisterForm","register","nim","name","role","hash","hashedPassword","create","logout","destroy","err","clearCookie","showProfile","userRole","userlogin","profile","userId","id","include","model"],"mappings":"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","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst db = require('../models');\r\n\r\nexports.showLoginForm = (req, res) => {\r\n  res.render('auth/login', { title: 'Login' });\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const user = await db.User.findOne({ where: { email } });\r\n    if (user && await bcrypt.compare(password, user.password)) {\r\n      req.session.user = user;\r\n      res.redirect('/pendaftaranBss');\r\n    } else {\r\n      res.status(401).send('Invalid email or password');\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal Server Error');\r\n  }\r\n};\r\n\r\nexports.showRegisterForm = (req, res) => {\r\n  res.render('auth/register', { title: 'Register' });\r\n};\r\n\r\nexports.register = async (req, res) => {\r\n  const { nim, name, email, password, role } = req.body;\r\n  try {\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = await db.User.create({ nim, name, email, password: hashedPassword, role });\r\n    req.session.user = user;\r\n    res.redirect('/login');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).send('User already exists');\r\n  }\r\n};\r\n\r\nexports.logout = (req, res) => {\r\n  req.session.destroy(err => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).send('Error logging out');\r\n    }\r\n    res.clearCookie('connect.sid');\r\n    res.redirect('/login');\r\n  });\r\n};\r\n\r\nexports.showProfile = async (req, res) => {\r\n  const userRole = userlogin.role; // Mendapatkan role user\r\n    // Render halaman status dengan data approvals dan pengguna yang sedang login\r\n    res.render('user/profile', {\r\n      title: 'Profile',\r\n      user: req.session.user, // Data pengguna yang sedang login\r\n      user: user,\r\n      userRole\r\n    });\r\n  };\r\n  \r\nexports.profile = async (req, res) => {\r\n   // Ambil data pengguna yang sedang login\r\n   const userId = req.session.user.id;\r\n\r\n   // Ambil pengajuanId dari model Pengajuan berdasarkan userId\r\n   try {\r\n    const user = await db.User.findOne({\r\n      where: { userId: userId },\r\n      include: [{ model: db.User }]\r\n    }); \r\n    req.session.user = user;\r\n    res.redirect('/profile');\r\n  }  catch (error) {\r\n    console.error('Error fetching approvals:', error);\r\n    res.status(500).send('Internal Server Error');\r\n  }\r\n};"],"file":"userController.dev.js"}