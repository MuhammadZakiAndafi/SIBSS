{"version":3,"sources":["server.js"],"names":["express","require","session","path","port","flash","userRoutes","approvalRoutes","app","set","join","__dirname","use","json","urlencoded","extended","secret","resave","saveUninitialized","cookie","secure","req","res","next","success_msg","pengajuanRoutes","skRoutes","sequelize","sync","force","then","log","err","console","error"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,mBADlBD,MAAUC,QAAQ,iBAGlBE,KAAOF,QAAQ,QAFfC,IAAOF,UAIPI,KAAO,aAHSH,QAAA,YAAhBI,mBAAAA,UAKAC,WAAaL,QAAQ,uBAJrBE,gBAAeF,QAArB,4BAMMM,eAAiBN,QAAQ,2BALzBO,SAAaP,QAAnB,qBACAO,IAAMJ,IAAI,cAAV,OAOAI,IAAIC,IAAI,QAASN,KAAKO,KAAKC,UAAW,UACtCH,IAAII,IAAIZ,QAPcC,OAAQE,KAAAO,KAADC,UAOe,YAE5CH,IAAII,IAAIZ,QAAQa,QARhBL,IAAMF,IAAAA,QAAUQ,WAAW,CAAAC,UAAA,KAU3BP,IAAII,IAAI,WAAYZ,QAAO,OAAQ,YAEnCQ,IAAII,IAAIV,QAAQ,CAVhBc,OAAMT,aAYJU,QAAQ,EAXVC,mBAAiBjB,EAafkB,OAAQ,CAAEC,QAAQ,MARpBZ,IAAII,IAAIZ,SACmBQ,IAA3BI,IAAA,SAAAS,EAAAC,EAAAC,GACAf,EAAII,OAAIY,YAAmBH,EAAAhB,MAAP,eAEpBG,EAAII,OAAIV,UAAQmB,EAAAhB,MAAA,aACdW,MAGQR,IAAkBI,IAAA,IAAAN,YAgB5BE,IAAII,IAAI,IAAKa,iBApBGjB,IAqBZI,IAdJ,IAAAL,gBAeAC,IAAII,IAAI,IAAKc,UAEbC,UAAUC,KAAK,CAAEC,OAAO,IAbrBC,KAAK,WACNR,QAAAS,IAAWP,qBAYb,MAVM,SAAAQ,GAINC,QAAAC,MAAA,2BAAAF,KAEAxB,IAAII,OAAJR,KAAaqB,WACbjB,QAAQuB,IAARvB,yCAAAA,OAAAJ","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst session = require('express-session');\r\nconst flash = require('connect-flash');\r\nconst path = require('path');\r\nconst app = express();\r\nconst port = 3000;\r\nconst { sequelize } = require('./models');\r\nconst userRoutes = require('./routes/userRoutes');\r\nconst pengajuanRoutes = require('./routes/pengajuanRoutes');\r\nconst approvalRoutes = require('./routes/approvalRoutes');\r\nconst skRoutes = require('./routes/skRoutes');\r\napp.set('view engine', 'ejs');\r\napp.set('views', path.join(__dirname, 'views')); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use('/uploads', express.static('uploads'));\r\n\r\napp.use(session({\r\n  secret: 'secret-key',\r\n  resave: false,\r\n  saveUninitialized: true,\r\n  cookie: { secure: false } // Pastikan secure diatur ke true di production\r\n}));\r\n\r\n// Middleware untuk flash messages\r\napp.use(flash());\r\n\r\n// Middleware untuk mengatur flash messages ke res.locals\r\napp.use((req, res, next) => {\r\n  res.locals.success_msg = req.flash('success_msg');\r\n  res.locals.error_msg = req.flash('error_msg');\r\n  next();\r\n});\r\n\r\n\r\n// routes\r\napp.use('/', userRoutes);\r\napp.use('/', pengajuanRoutes);\r\napp.use('/', approvalRoutes);\r\napp.use('/', skRoutes);\r\n\r\nsequelize.sync({ force: false })  // Set to true if you want to drop and recreate tables\r\n  .then(() => {\r\n    console.log('Database synced');\r\n  })\r\n  .catch(err => {\r\n    console.error('Failed to sync database:', err);\r\n  });\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running at http://localhost:${port}`);\r\n});\r\n"]}