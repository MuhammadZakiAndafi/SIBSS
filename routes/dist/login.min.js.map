{"version":3,"sources":["login.js"],"names":["express","require","bcrypt","Router","db","mysql","createConnection","host","router","user","password","connect","err","error","console","log","get","req","res","render","post","_req$body","body","status","send","query","results","length","compare","isMatch","session","redirect","loggedin","username","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,OAASD,QAAQ,YADjBD,MAAUC,QAAQ,SAClBC,OAASD,QAAQE,SAMjBC,GAAKC,MAAMC,iBAAiB,CAHlCC,KAAMC,YAKJC,KAAM,OAFRC,SAAWL,GACTE,SAAM,UAD0BH,GAQ/BO,QADH,SAAAC,GAEMA,EADHD,QAAQE,MAAA,6BAAOD,GAGdE,QAAAC,IAAA,iCAGHP,OAEDQ,IAAA,IAAA,SAAAC,EAAAC,GAEEA,EAAIC,OAAO,WAIbX,OAAOY,KAAK,IAAK,SAACH,EAAKC,GAAQ,IAAAG,EAARH,EAAQI,KAAxBF,EAAwBC,EAAxBD,SAAUV,EAAcW,EAAdX,SAAc,IACXA,IADWA,EAK3B,OAAOQ,EAAIK,OAAO,KAAKC,KAAK,wCAI9BpB,GAAGqB,MACD,yCADA,CAACA,GAIC,SAAAb,EAAIA,GACFE,OAAAA,GACAA,QAAUD,MACPU,2BACKX,GAGVM,EAJKK,OAAO,KACPC,KAAK,+CAIa,IAAnBE,EAAQC,OACHT,EAAIK,OAAO,KAAKC,KAAK,4CAO1BtB,OAAA0B,QACGL,EACAC,EAAK,GAAAd,SAAA,SAAAE,EAAAiB,GACT,GAAAjB,EAEGiB,OANFf,QAAQD,MAAM,6BAA8BD,GAM9CM,EACEK,OAAA,KACIO,KAAAA,8CAGJD,GACAX,EAAIa,QAASC,UAAb,EANFf,EAOOa,QAAAG,SAAAA,EACLf,QAAAH,IAAAE,EAAgBO,SAhBpBN,EAAAa,SAAA,eA1BNb,EAAAK,OAAA,KAAAC,KAAA,6CAiDAU,OAAOC,QAAU3B","file":"login.min.js","sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst mysql = require('mysql');\r\n\r\nconst router = express.Router();\r\n\r\n// Config to MySQL\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'sibss'\r\n});\r\n\r\n// connecting database\r\ndb.connect(err => {\r\n  if (err) {\r\n    console.error('Error connecting to MySQL:', err);\r\n    return;\r\n  }\r\n  console.log('Connected to MySQL database');\r\n});\r\n\r\n// Endpoint login page\r\nrouter.get('/', (req, res) => {\r\n  res.render('login'); // Pastikan ini merender file login.ejs\r\n});\r\n\r\n// Endpoint login\r\nrouter.post('/', (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  // Checking for password and username\r\n  if (!username || !password) {\r\n    return res.status(400).send('Please provide username and password');\r\n  }\r\n\r\n  // Checking username\r\n  db.query(\r\n    'SELECT * FROM users WHERE username = ?',\r\n    [username],\r\n    (err, results) => {\r\n      if (err) {\r\n        console.error('Error in database query:', err);\r\n        return res\r\n          .status(500)\r\n          .send('An error occurred. Please try again later.');\r\n      }\r\n\r\n      // if false\r\n      if (results.length === 0) {\r\n        return res.status(401).send('Incorrect Username and/or Password!');\r\n      }\r\n\r\n      // Checking password\r\n      bcrypt.compare(password, results[0].password, (err, isMatch) => {\r\n        if (err) {\r\n          console.error('Error comparing passwords:', err);\r\n          return res\r\n            .status(500)\r\n            .send('An error occurred. Please try again later.');\r\n        }\r\n\r\n        if (isMatch) {\r\n          // Setting session variables\r\n          req.session.loggedin = true;\r\n          req.session.username = username;\r\n          console.log(req.session); // Logging session after successful login\r\n          // Redirect to dashboard after successful login\r\n          res.redirect('/dashboard');\r\n        } else {\r\n          res.status(401).send('Incorrect Username and/or Password!');\r\n        }\r\n      });\r\n    }\r\n  );\r\n});\r\n\r\nmodule.exports = router;"]}